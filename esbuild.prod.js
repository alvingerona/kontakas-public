const { build } = require("esbuild");
const { join } = require("path");
const { readdirSync, existsSync, mkdirSync } = require("fs");
const { dirname } = require("path");
const { glob } = require("glob");

/** @type {import('esbuild').BuildOptions} */
const baseConfig = {
  platform: "node",
  target: "node20",
  format: "cjs",
  bundle: true,
  minify: true,
  sourcemap: false,
  sourcesContent: false,
  treeShaking: true,
  tsconfig: "tsconfig.json",
  external: ["aws-sdk"],
  minifyIdentifiers: true,
  minifySyntax: true,
  minifyWhitespace: true,
};

// Build handlers in each subdirectory
async function buildHandlers() {
  // Get all directories in the src/handlers folder
  const handlersDir = join(process.cwd(), "src/handlers");
  const handlerDirs = readdirSync(handlersDir, { withFileTypes: true })
    .filter((dirent) => dirent.isDirectory())
    .map((dirent) => dirent.name);

  for (const dir of handlerDirs) {
    const entryFile = join(handlersDir, dir, "index.ts");
    if (existsSync(entryFile)) {
      const outputPath = `dist/handlers/${dir}/index.js`;
      const outputDir = dirname(join(process.cwd(), outputPath));

      if (!existsSync(outputDir)) {
        mkdirSync(outputDir, { recursive: true });
      }

      try {
        await build({
          ...baseConfig,
          entryPoints: [entryFile],
          outfile: outputPath,
          banner: { js: "// Generated by esbuild" },
        });
        console.log(`Successfully built: ${outputPath}`);
      } catch (error) {
        console.error(`Failed to build ${entryFile}:`, error);
        throw error;
      }
    }
  }
}

// Build utility files
async function buildUtils() {
  const utilsDir = join(process.cwd(), "src/utils");
  if (existsSync(utilsDir)) {
    try {
      const utilFiles = readdirSync(utilsDir)
        .filter((file) => file.endsWith(".ts"))
        .map((file) => join(utilsDir, file));

      for (const file of utilFiles) {
        const outputPath = file.replace("src/", "dist/").replace(".ts", ".js");
        const outputDir = dirname(outputPath);

        if (!existsSync(outputDir)) {
          mkdirSync(outputDir, { recursive: true });
        }

        await build({
          ...baseConfig,
          entryPoints: [file],
          outfile: outputPath,
          banner: { js: "// Generated by esbuild" },
        });
        console.log(`Successfully built: ${outputPath}`);
      }
    } catch (error) {
      console.error(`Failed to build utils:`, error);
      throw error;
    }
  }
}

// Build all TypeScript files in any directory under src
async function buildAllSrcFiles() {
  try {
    // Get all TypeScript files in the src directory (excluding node_modules)
    const srcFiles = await glob("src/**/*.ts", {
      ignore: ["**/node_modules/**"],
    });

    for (const file of srcFiles) {
      // Skip files that are already being built by other functions
      if (file.startsWith("src/handlers/") && file.endsWith("/index.ts")) {
        continue; // Skip handler entry files already processed by buildHandlers
      }
      if (file.startsWith("src/utils/")) {
        continue; // Skip util files already processed by buildUtils
      }

      // Create the corresponding output path
      const outputPath = file.replace("src/", "dist/").replace(".ts", ".js");
      const outputDir = dirname(outputPath);

      if (!existsSync(outputDir)) {
        mkdirSync(outputDir, { recursive: true });
      }

      await build({
        ...baseConfig,
        entryPoints: [file],
        outfile: outputPath,
        banner: { js: "// Generated by esbuild" },
      });
      console.log(`Successfully built: ${outputPath}`);
    }
  } catch (error) {
    console.error(`Failed to build other src files:`, error);
    throw error;
  }
}

// Build all project files
async function buildAll() {
  await buildHandlers();
  await buildUtils();
  await buildAllSrcFiles();
}

buildAll()
  .then(() => console.log("Build completed successfully"))
  .catch((err) => {
    console.error("Build failed:", err);
    process.exit(1);
  });
