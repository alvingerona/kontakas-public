const { build } = require("esbuild");
const { join } = require("path");
const { readdirSync, existsSync, mkdirSync } = require("fs");
const { extname, basename, dirname } = require("path");

/** @type {import('esbuild').BuildOptions} */
const baseConfig = {
  platform: "node",
  target: "node20",
  format: "cjs",
  bundle: true,
  minify: false,
  sourcemap: true,
  sourcesContent: true,
  treeShaking: true,
  tsconfig: "tsconfig.json",
  external: ["aws-sdk"],
  nodePaths: [join(process.cwd(), "node_modules")],
};
// Get all directories in the src/handlers folder
const handlersDir = join(process.cwd(), "src/handlers");
const handlerDirs = readdirSync(handlersDir, { withFileTypes: true })
  .filter((dirent) => dirent.isDirectory())
  .map((dirent) => dirent.name);

// Build handlers in each subdirectory
async function buildHandlers() {
  for (const dir of handlerDirs) {
    const entryFile = join(handlersDir, dir, "index.ts");
    if (existsSync(entryFile)) {
      const outputPath = `dist/handlers/${dir}/index.js`;
      const outputDir = dirname(join(process.cwd(), outputPath));

      if (!existsSync(outputDir)) {
        mkdirSync(outputDir, { recursive: true });
      }

      try {
        await build({
          ...baseConfig,
          entryPoints: [entryFile],
          outfile: outputPath,
          banner: { js: "// Generated by esbuild" },
        });
        console.log(`Successfully built: ${outputPath}`);
      } catch (error) {
        console.error(`Failed to build ${entryFile}:`, error);
        throw error;
      }
    }
  }
}

buildHandlers()
  .then(() => console.log("Build completed successfully"))
  .catch((err) => {
    console.error("Build failed:", err);
    process.exit(1);
  });
